version: "3.8"

services:
  # --------------------------------------------------------------------
  # 1. Iceberg REST catalog (Tabulario build with JDBC backend)
  # --------------------------------------------------------------------
  rest:
    image: tabulario/iceberg-rest:0.6.0
    container_name: iceberg-rest
    environment:
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password
      AWS_REGION: us-east-1

      # ---- Catalog configuration ----
      CATALOG_CATALOG__IMPL: org.apache.iceberg.jdbc.JdbcCatalog
      CATALOG_JDBC_URI: jdbc:sqlite:/catalog/iceberg_catalog.db
      CATALOG_WAREHOUSE: s3://warehouse
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_ENDPOINT: http://minio:9000
      CATALOG_S3_PATH_STYLE_ACCESS: "true"
    volumes:
      - ./rest-catalog:/catalog
    depends_on:
      - minio
    ports:
      - "8181:8181"
    networks:
      - iceberg_net

  # --------------------------------------------------------------------
  # 2. Spark + Iceberg client image
  # --------------------------------------------------------------------
  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    user: root
    depends_on:
      - rest
      - minio
    environment:
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password
      AWS_REGION: us-east-1
    volumes:
      - ./warehouse:/home/iceberg/warehouse
      - ./notebooks:/home/iceberg/notebooks
    ports:
      - "8888:8888"
      - "8080:8080"
      - "10000:10000"
      - "10001:10001"
    networks:
      - iceberg_net

  # --------------------------------------------------------------------
  # 3. RisingWave single-node
  # --------------------------------------------------------------------
  risingwave:
    image: risingwavelabs/risingwave:latest
    container_name: risingwave
    command: single_node
    ports:
      - "4566:4566"
      - "5691:5691"
    depends_on:
      - rest
      - minio
    networks:
      iceberg_net:
        aliases:
          - risingwave-standalone   # so postgres_prepare can reach it

  # --------------------------------------------------------------------
  # 4. MinIO object store
  # --------------------------------------------------------------------
  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
      MINIO_DOMAIN: minio
    volumes:
      - ./minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio

  # --------------------------------------------------------------------
  # 5. mc helper â€“ prepares the bucket & prefix
  # --------------------------------------------------------------------
  mc:
    image: minio/mc
    container_name: mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (mc config host add minio http://minio:9000 admin password) do
        echo '...waiting for MinIO...' && sleep 1;
      done;
      mc mb -p minio/warehouse || true;
      mc policy set public minio/warehouse;
      tail -f /dev/null
      "
    networks:
      - iceberg_net

  # --------------------------------------------------------------------
  # 6. PostgreSQL (added)
  # --------------------------------------------------------------------
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: "123456"
      POSTGRES_DB: mydb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    command: ["postgres", "-c", "wal_level=logical"]
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "myuser", "-d", "mydb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - iceberg_net

  postgres_prepare:
    image: postgres:17-alpine
    container_name: postgres_prepare
    depends_on:
      - postgres
    restart: on-failure
    volumes:
      - ./postgres_prepare.sql:/postgres_prepare.sql:ro
    entrypoint: >
      /bin/sh -c "
        psql postgresql://myuser:123456@postgres:5432/mydb < /postgres_prepare.sql "
    networks:
      - iceberg_net

networks:
  iceberg_net:

volumes:
  postgres-data:
